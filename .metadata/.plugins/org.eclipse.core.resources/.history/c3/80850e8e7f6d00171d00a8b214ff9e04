package Controller.AuthHeadersGenerator;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import Controller.AuthHeadersGenerator.AuthCommon.*;




public class TwitterAuthHeaderGen extends AllAuthKeys {
	
	private AuthCommon authCommon = new AuthCommon();
	
	public String generateAuthorizationHeader(String method, String url, HttpParameter[] params) {
		long timestamp = System.currentTimeMillis() / 1000;
		long nonce = timestamp + authCommon.RAND.nextInt();
		if (null == params) {
			params = new HttpParameter[0];
		}
		
		TwitterKeys keys = new TwitterKeys();
		List<HttpParameter> oauthHeaderParams = new ArrayList<HttpParameter>(5);
		oauthHeaderParams.add(new HttpParameter("oauth_consumer_key", keys.ConsumerKey));
		oauthHeaderParams.add(new HttpParameter("oauth_nonce", nonce));
		oauthHeaderParams.add(new HttpParameter("oauth_signature_method", "HMAC-SHA1"));
		oauthHeaderParams.add(new HttpParameter("oauth_timestamp", timestamp));
		oauthHeaderParams.add(new HttpParameter("oauth_token", keys.AuthToken));
		oauthHeaderParams.add(new HttpParameter("oauth_version", "1.0"));

		List<HttpParameter> signatureBaseParams = new ArrayList<HttpParameter>(
				oauthHeaderParams.size() + params.length);
		signatureBaseParams.addAll(oauthHeaderParams);
		if (!HttpParameter.containsFile(params)) {
			signatureBaseParams.addAll(authCommon.toParamList(params));
		}
		parseGetParameters(url, signatureBaseParams);
		StringBuilder base = new StringBuilder(method).append("&")
				.append(HttpParameter.encode(constructRequestURL(url))).append("&");
		base.append(HttpParameter.encode(normalizeRequestParameters(signatureBaseParams)));
		String oauthBaseString = base.toString();
		String signature = generateSignature(oauthBaseString);

		oauthHeaderParams.add(new HttpParameter("oauth_signature", signature));

		// http://oauth.net/core/1.0/#rfc.section.9.1.1
		if (realm != null) {
			oauthHeaderParams.add(new HttpParameter("realm", realm));
		}
		String encodedParam = encodeParameters(oauthHeaderParams, ",", true);
		return "OAuth " + encodedParam;
	}
	
	static String constructRequestURL(String url) {
		int index = url.indexOf("?");
		if (-1 != index) {
			url = url.substring(0, index);
		}
		int slashIndex = url.indexOf("/", 8);
		String baseURL = url.substring(0, slashIndex).toLowerCase();
		int colonIndex = baseURL.indexOf(":", 8);
		if (-1 != colonIndex) {
			// url contains port number
			if (baseURL.startsWith("http://") && baseURL.endsWith(":80")) {
				// http default port 80 MUST be excluded
				baseURL = baseURL.substring(0, colonIndex);
			} else if (baseURL.startsWith("https://") && baseURL.endsWith(":443")) {
				// http default port 443 MUST be excluded
				baseURL = baseURL.substring(0, colonIndex);
			}
		}
		url = baseURL + url.substring(slashIndex);

		return url;
	}
	private void parseGetParameters(String url, List<HttpParameter> signatureBaseParams) {
		int queryStart = url.indexOf("?");
		if (-1 != queryStart) {
			url.split("&");
			String[] queryStrs = url.substring(queryStart + 1).split("&");
			try {
				for (String query : queryStrs) {
					String[] split = query.split("=");
					if (split.length == 2) {
						signatureBaseParams.add(new HttpParameter(URLDecoder.decode(split[0], "UTF-8"),
								URLDecoder.decode(split[1], "UTF-8")));
					} else {
						signatureBaseParams.add(new HttpParameter(URLDecoder.decode(split[0], "UTF-8"), ""));
					}
				}
			} catch (UnsupportedEncodingException ignore) {
			}

		}

	}
}
