package Controller.AuthHeadersGenerator;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;


public class AuthCommon {
	public static final Random RAND = new Random();

	protected List<HttpParameter> toParamList(HttpParameter[] params) {
		List<HttpParameter> paramList = new ArrayList<HttpParameter>(params.length);
		paramList.addAll(Arrays.asList(params));
		return paramList;
	}

	protected String constructRequestURL(String url) {
		int index = url.indexOf("?");
		if (-1 != index) {
			url = url.substring(0, index);
		}
		int slashIndex = url.indexOf("/", 8);
		String baseURL = url.substring(0, slashIndex).toLowerCase();
		int colonIndex = baseURL.indexOf(":", 8);
		if (-1 != colonIndex) {
			// url contains port number
			if (baseURL.startsWith("http://") && baseURL.endsWith(":80")) {
				// http default port 80 MUST be excluded
				baseURL = baseURL.substring(0, colonIndex);
			} else if (baseURL.startsWith("https://") && baseURL.endsWith(":443")) {
				// http default port 443 MUST be excluded
				baseURL = baseURL.substring(0, colonIndex);
			}
		}
		url = baseURL + url.substring(slashIndex);

		return url;
	}
	protected String normalizeRequestParameters(List<HttpParameter> params) {
		Collections.sort(params);
		return encodeParameters(params);
	}
	public static String encodeParameters(List<HttpParameter> httpParams) {
		return encodeParameters(httpParams, "&", false);
	}

	public static String encodeParameters(List<HttpParameter> httpParams, String splitter, boolean quot) {
		StringBuilder buf = new StringBuilder();
		for (HttpParameter param : httpParams) {
			if (!param.isFile()) {
				if (buf.length() != 0) {
					if (quot) {
						buf.append("\"");
					}
					buf.append(splitter);
				}
				buf.append(HttpParameter.encode(param.getName())).append("=");
				if (quot) {
					buf.append("\"");
				}
				buf.append(HttpParameter.encode(param.getValue()));
			}
		}
		if (buf.length() != 0) {
			if (quot) {
				buf.append("\"");
			}
		}
		return buf.toString();
	}
}
